<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kobook.mappers.myPageMapper">

	<!-- 주문자 정보 -->
	<select id="orderPerson" resultType="PersonVO" parameterType="int">
		SELECT *
		FROM person
		WHERE person_id = #{person_id}
	</select>

	<!-- 판매내역 리스트 -->
	<select id="sellList" resultType="BookVO" parameterType="SearchDateCriteria">
		SELECT person_id, book_id, book_m_price,book_sell_state,book_img,to_date(TO_CHAR(book_date,'YYYY-MM-DD'),'YYYY-MM-DD') as book_date,book_name
		FROM book
		WHERE person_id = #{person_id}
		<if test="null != start_date">
			<if test="start_date != ''.toString()">
				and book_date between #{start_date} and #{end_date}
			</if>
		</if>
	</select>

	<!-- 판매상태 업데이트 -->
	<update id="sellStateUpdate" parameterType="BookVO">
		UPDATE book
		SET
		book_sell_state = #{book_sell_state}
		WHERE book_id = #{book_id}
	</update>

	<!-- 구매내역 리스트 -->
	<select id="buyList" resultType="hashMap" parameterType="SearchDateCriteria">
		SELECT
		p.pay_id,
		b.book_img,
		b.book_name,
		p.pay_amount,
		TO_CHAR(o.order_date,'YYYY-MM-DD') as order_date
		FROM
		book_order o,
		book b,
		pay p
		WHERE o.order_id = p.order_id
		AND
		o.book_id =
		b.book_id
		AND o.person_id = #{person_id}
		<if test="null != start_date">
			<if test="start_date != ''.toString()">
				and o.order_date between #{start_date} and #{end_date}
			</if>
		</if>
		ORDER BY p.pay_id DESC
	</select>

	<!-- 구매내역 리스트 카운팅 -->
	<select id="countPaging" resultType="Integer" parameterType="SearchDateCriteria">
		SELECT
		count(p.pay_id) as pay_cnt
		FROM
		book_order o,
		book b,
		pay p
		WHERE
		o.order_id = p.order_id
		AND
		o.book_id = b.book_id
		<if test="null != start_date">
			<if test="start_date != ''.toString()">
				and o.order_date between #{start_date} and #{end_date}
			</if>
		</if>

		AND o.person_id = #{person_id}
	</select>

	<!-- 판매내역 리스트 카운팅 -->
	<select id="sellCountPaging" resultType="Integer" parameterType="SearchDateCriteria">
		SELECT count(book_id)
		FROM book
		WHERE person_id = #{person_id}
		<if test="null != start_date">
			<if test="start_date != ''.toString()">
				and book_date between #{start_date} and #{end_date}
			</if>
		</if>
	</select>

	<!-- 찜리 -->
	<select id="pickList" resultType="hashMap" parameterType="int">
		SELECT
		b.book_id,
		b.book_img,
		b.book_name,
		b.book_m_price,
		b.book_sell_state,
		p.pick_id
		FROM
		book b,
		pick p,
		person person
		WHERE b.book_id = p.book_id
		AND p.person_id = person.person_id
		AND p.pick_state = 'Y'
		AND
		person.person_id = #{person_id}
		ORDER BY p.pick_id DESC
	</select>

	<!-- 찜 리스트 카운팅 -->
	<select id="countPagingPick" resultType="Integer" parameterType="int">
		SELECT
		count(p.pick_id) as pick_cnt
		FROM
		book b,
		pick p,
		person person
		WHERE b.book_id = p.book_id
		AND p.person_id
		= person.person_id
		AND p.pick_state = 'Y'
		AND
		person.person_id =
		#{person_id}
	</select>

	<!-- 찜 상태 변경 -->
	<update id="pickUpdate" parameterType="int">
		UPDATE pick
		SET pick_state
		= 'N'
		WHERE pick_id = #{pick_id}
	</update>

	<!-- 마일리지 리스트 -->
	<select id="mileageList" resultType="hashMap">
		SELECT TO_CHAR(o.order_date,'YYYY-MM-DD') as order_date ,
		m.mileage_point,
		m.mileage_kind
		FROM mileage m,
		pay p,
		book_order o
		WHERE
		m.pay_id = p.pay_id
		AND p.order_id = o.order_id
		AND o.person_id =
		#{person_id}
		ORDER BY o.order_date DESC
	</select>


	<!-- 주문내역 -->
	<select id="oneBook" resultType="BookVO">
		select * from book where book_id
		= #{book_id}
	</select>

	<!-- 주문등록 -->
	<insert id="orderInsert" parameterType="OrderVO">
		INSERT INTO book_order
		VALUES (order_id_seq.NEXTVAL,
		TO_CHAR(SYSDATE,'YYYY-MM-DD'),
		#{book_id},
		#{person_id})
	</insert>

	<!-- MAX order_id -->
	<select id="maxOrderID" resultType="int">
		select max(order_id)
		from
		book_order
	</select>

	<!-- MAX pay_id -->
	<select id="maxPayID" resultType="int">
		select max(pay_id)
		from
		pay
	</select>

	<!-- 결제 등록 -->
	<insert id="payInsert" parameterType="PayVO">
		INSERT INTO pay
		VALUES(pay_id_seq.NEXTVAL,#{pay_amount},TO_CHAR(SYSDATE,'YYYY-MM-DD'),#{order_id})
	</insert>

	<!-- 배달 등록 -->
	<insert id="deliveryInsert" parameterType="DeliveryVO">
		INSERT INTO delivery
		(delivery_id, order_id, delivery_msg, delivery_address)
		VALUES(delivery_id_seq.NEXTVAL,#{order_id},#{delivery_msg},#{delivery_address})
	</insert>

	<!-- 마일리지 등록 -->
	<insert id="mileageInsert" parameterType="MileageVO">
		INSERT INTO mileage
		VALUES(mileage_id_seq.NEXTVAL,#{mileage_kind},TO_CHAR(SYSDATE,'YYYY-MM-DD'),#{mileage_point},#{pay_id},#{person_id})
	</insert>

	<!-- 회원의 적립된 총 마일리지 -->
	<select id="mileageTotal" resultType="Integer">
		select sum(mileage_point)
		from mileage
		where mileage_kind = 'P'
		and person_id = #{person_id}
	</select>

	<!-- 회원의 사용 마일리지 -->
	<select id="mileageUse" resultType="Integer">
		select sum(mileage_point)
		from mileage
		where mileage_kind = 'M'
		and person_id = #{person_id}
	</select>

	<!-- 회원이 받은 쪽지 -->
	<select id="receivedMsgTotal" resultType="hashMap" parameterType="SearchDateCriteria">
		select m.message_id,m.person_id,TO_CHAR(m.message_date,'YYYY-MM-DD') as message_date,
		m.message_content,m.message_hit, p.person_email, p.person_name as
		p_name
		from message m , person p
		where m.person_id = p.person_id
		and m.RECEIVER_ID = #{person_id}
		<if test="null != start_date">
			<if test="start_date != ''.toString()">
				and m.message_date between #{start_date} and #{end_date}
			</if>
		</if>
		ORDER BY message_id DESC
	</select>

	<!-- 회원이 받은 쪽지 삭제 -->
	<delete id="msgDelete" parameterType="int">
		DELETE FROM message
		WHERE message_id = #{message_id}
	</delete>

	<!-- 찜 상태 변경 -->
	<update id="msgUpdate" parameterType="int">
		UPDATE message
		SET
		message_hit = 1
		WHERE message_id = #{message_id}
	</update>




</mapper>